name: "Docker build & push"

on:
  push:
    branches:
      - master
      - release_*
    paths:
      - deploy/**
      - label_studio/**
      - setup.py
      - .github/workflows/docker-build.yml
    tags: [ '*' ]

env:
  DOCKER_CLI_EXPERIMENTAL: enabled
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_TAG: 'latest'

jobs:
  docker_build_and_push:
    name: "Docker build and push"
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Override image tag on 'tag'
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "DOCKER_TAG=$(echo ${GITHUB_REF#refs/tags/})" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0

      - name: Login to DockerHub
        uses: docker/login-action@v1.14.1
        with:
          username: heartexlabs
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'

      - name: Create version_.py
        run: |
          python3 $(pwd)/label_studio/core/version.py
          cat $(pwd)/label_studio/core/version_.py

      - name: Build and push
        uses: docker/build-push-action@v2.10.0
        id: docker_build_and_push
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DOCKER_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  deploy_eks:
    name: "Deploy image in EKS"
    runs-on: ubuntu-latest
    if: contains(github.ref, 'release_test')
    env:
      AWS_REGION: us-east-2
      CLUSTER_NAME: dev-cogniflow-cluster
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: kubeconfig dev
        id: kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }} --kubeconfig .kubeconfig
          echo "::set-output name=KUBE_CONFIG_DATA::$(cat .kubeconfig)"
      - name: deploy to cluster
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ steps.kubeconfig.outputs.KUBE_CONFIG_DATA }}
          ECR_REGISTRY: ${{ env.REGISTRY }}
          ECR_REPOSITORY: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ env.DOCKER_TAG }}
        with:
          args: set image deployment/$ECR_REPOSITORY $ECR_REPOSITORY=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
